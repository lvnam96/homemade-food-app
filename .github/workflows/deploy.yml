name: 🚀 Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-22.04
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          node-version: 22

      - name: 📥 Install deps
        run: pnpm install

      - name: 🔬 Lint
        run: pnpm run lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-22.04
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          node-version: 22

      - name: 📥 Install deps
        run: pnpm install

      - name: 🔎 Type check
        run: pnpm run typecheck

  # vitest:
  #   name: ⚡ Vitest
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: ⬇️ Checkout repo
  #       uses: actions/checkout@v4

  #     - uses: pnpm/action-setup@v4
  #       with:
  #         run_install: false

  #     - name: ⎔ Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: 'pnpm'
  #         node-version: 22

  #     - name: 📥 Install deps
  #       run: pnpm install

  #     - name: ⚡ Run vitest
  #       run: pnpm run test -- --coverage

  test:
    name: ⚡ Run Vitest and collect results
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: ⎔ Setup Node
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          node-version: 22

      - name: 📥 Install deps
        run: pnpm install

      - name: ⚡ Run tests
        run: pnpm run test:coverage --reporter=junit --outputFile=test-report.junit.xml

      - name: Upload coverage results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # playwright:
  #   name: 🎭 Playwright
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 60
  #   steps:
  #     - name: ⬇️ Checkout repo
  #       uses: actions/checkout@v4

  #     - name: 🏄 Copy test env vars
  #       run: cp .env.example .env

  #     - uses: pnpm/action-setup@v4
  #       with:
  #         run_install: false

  #     - name: ⎔ Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: 'pnpm'
  #         node-version: 22

  #     - name: 📥 Install deps
  #       run: pnpm install

  #     - name: 📥 Install Playwright Browsers
  #       run: pnpm run test:e2e:install

  #     - name: 🛠 Setup Database
  #       run: npx drizzle push

  #     - name: 🏦 Cache Database
  #       id: db-cache
  #       uses: actions/cache@v4
  #       with:
  #         path: drizzle/data.db
  #         key: db-cache-schema_${{ hashFiles('./drizzle/schema.drizzle')
  #           }}-migrations_${{ hashFiles('./prisma/migrations/*/migration.sql')
  #           }}

  #     - name: 🌱 Seed Database
  #       if: steps.db-cache.outputs.cache-hit != 'true'
  #       run: npx drizzle migrate reset --force

  #     - name: 🏗 Build
  #       run: pnpm run build

  #     - name: 🎭 Playwright tests
  #       run: npx playwright test

  #     - name: 📊 Upload report
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-22.04
    needs: [lint, typecheck] # add `vitest, playwright` when they are ready
    # only build/deploy branches on pushes
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          node-version: 22

      - name: 👀 Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      - name: 📥 Install deps
        run: pnpm install

      - name: 🏗 Build
        run: pnpm run build

      - name: 🚀 Deploy Staging
        if: ${{ github.ref == 'refs/heads/develop' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}

      - name: 🚀 Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          vercel-args: '--prod'
